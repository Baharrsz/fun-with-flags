{"version":3,"sources":["components/Display.js","components/FeaturesSection.js","components/OptionsSection.js","components/UserInput.js","components/Header.js","components/Celebration.js","assets/loading.svg","components/Loading.js","components/Instructions.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","announce","announceClass","removeAnnounceClass","src","flagClass","current","currentScoreClass","total","totalScoreClass","handleScoreAnimationStop","count","countClass","allGamesNum","className","Announce","extraClass","removeClass","Flag","Score","score","type","handleAnimationStop","onAnimationEnd","alt","replace","toUpperCase","FeaturesInstructions","FeaturesSection","handleSubmit","inputVal","handleInputChange","name","Radio","optionNames","GuessSection","sectionType","language","currency","OptionsSection","state","displayOptns","optionsArr","showOptions","setState","produceOptions","country","countriesArray","changeScore","seeOptionsScore","hideOptions","OptionsInstruction","handleClick","this","OptionsGuess","display","prevProps","Component","onClick","currentOptions","options","length","i","Math","floor","random","indexOf","unshift","len","includes","UserInput","handleGiveup","handleReset","id","onSubmit","autoComplete","trigger","matchAny","maxOptions","spacer","offsetY","passThroughEnter","value","onChange","change","map","option","idx","key","submit","preventDefault","setTimeout","Header","toggleInstructions","Celebration","resetGame","hideCelebration","Loading","loading","Instructions","toggle","announceClassName","yOrN","App","undefined","guessed","currentScore","totalScore","countryInputVal","languageInputVal","currencyInputVal","displayCelebration","optionsClass","displayInstructions","getCountry","index","axios","get","then","response","data","console","log","flagAnimationClassName","newGameDelay","target","submitted","toLowerCase","handleFinalGuess","handleFeatureGuess","reset","isMultipleAnswer","increment","wrongGuessScore","animationClassName","scoreAnimationClassName","altSpellings","some","spelling","changeCurrentScore","useHintScore","region","obj","classList","split","removeScoreClass","optionsAnimationClassName","inputValObj","flag","countryObj","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5d22200.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Display(props) {\n  const {\n    announce,\n    announceClass,\n    removeAnnounceClass,\n    src,\n    flagClass,\n    current,\n    currentScoreClass,\n    total,\n    totalScoreClass,\n    handleScoreAnimationStop,\n    count,\n    countClass,\n    allGamesNum,\n  } = props;\n\n  return (\n    <div className=\"display\">\n      <Announce\n        announce={announce}\n        extraClass={announceClass}\n        removeClass={removeAnnounceClass}\n      />\n\n      <Flag src={src} flagClass={flagClass} />\n\n      <Score\n        score={current}\n        type=\"current-score\"\n        extraClass={currentScoreClass}\n        handleAnimationStop={handleScoreAnimationStop}\n      />\n      <Score\n        score={total}\n        type=\"total-score\"\n        extraClass={totalScoreClass}\n        handleAnimationStop={handleScoreAnimationStop}\n      />\n      <Score\n        score={count}\n        type=\"correct-guesses\"\n        extraClass={countClass}\n        handleAnimationStop={handleScoreAnimationStop}\n        allGamesNum={allGamesNum}\n      />\n    </div>\n  );\n}\n\nfunction Announce({ announce, extraClass, removeClass }) {\n  return (\n    <div\n      className={`display__item announce ${extraClass}`}\n      onAnimationEnd={removeClass}\n    >\n      {announce}\n    </div>\n  );\n}\n\nfunction Flag({ src, flagClass }) {\n  return (\n    <div className=\"flag\">\n      <img\n        className={`display__item flag__img ${flagClass}`}\n        src={src}\n        alt=\"flag\"\n      ></img>\n    </div>\n  );\n}\n\nfunction Score(props) {\n  let { score, type, extraClass, handleAnimationStop, allGamesNum } = props;\n  allGamesNum = allGamesNum ? (\n    <label className=\"score__label\">&nbsp; of &nbsp;{allGamesNum}</label>\n  ) : (\n    <></>\n  );\n\n  return (\n    <div className={`display__item score score--${type}`}>\n      <label className=\"score__label\">\n        {type.replace(\"-\", \" \").toUpperCase()} &nbsp;&nbsp;\n      </label>\n      <span\n        className={`score__content score__${extraClass}`}\n        onAnimationEnd={handleAnimationStop}\n      >\n        {score}\n      </span>\n      {allGamesNum}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Radio, GuessSection } from \"./UserInput\";\n\nfunction FeaturesInstructions() {\n  return (\n    <div className=\"input__subsection input__subsection--instructions\">\n      <p className=\"input__text input__text--or\">OR</p>\n      <p className=\"input__text\">\n        Guess the continent, language or currency first.\n      </p>\n      <p className=\"input__text\">(You will lose 5 points for each guess)</p>\n    </div>\n  );\n}\n\nfunction FeaturesSection({ handleSubmit, inputVal, handleInputChange }) {\n  return (\n    <div className=\"input__section input__section--features\" name=\"features\">\n      <FeaturesInstructions />\n      <Radio\n        type=\"continent\"\n        optionNames={[\n          \"Asia\",\n          \"Africa\",\n          \"Americas\",\n          \"Europe\",\n          \"Oceania\",\n          \"Polar\",\n        ]}\n        handleSubmit={handleSubmit}\n      />\n      <GuessSection\n        type=\"language\"\n        sectionType=\"subsection\"\n        handleSubmit={handleSubmit}\n        inputVal={inputVal.language}\n        handleInputChange={handleInputChange}\n      />\n      <GuessSection\n        type=\"currency\"\n        sectionType=\"subsection\"\n        handleSubmit={handleSubmit}\n        inputVal={inputVal.currency}\n        handleInputChange={handleInputChange}\n      />\n    </div>\n  );\n}\n\nexport default FeaturesSection;\n","import React, { Component } from \"react\";\nimport { Radio } from \"./UserInput\";\n\nexport default class OptionsSection extends Component {\n  state = { displayOptns: false, optionsArr: [] };\n\n  render() {\n    return (\n      <div className=\"input__section input__section--options\">\n        <OptionsInstruction handleClick={this.showOptions} />\n        <OptionsGuess\n          display={this.state.displayOptns}\n          handleSubmit={this.props.handleSubmit}\n          hideOptions={this.hideOptions}\n          optionsArr={this.state.optionsArr}\n        />\n      </div>\n    );\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.country !== this.props.country)\n      this.setState({ displayOptns: false });\n  }\n\n  showOptions = () => {\n    if (!this.state.displayOptns) {\n      this.setState({\n        displayOptns: true,\n        optionsArr: produceOptions(\n          this.props.country,\n          this.props.countriesArray,\n          this.state.optionsArr\n        ),\n      });\n      this.props.changeScore(this.props.seeOptionsScore);\n    }\n  };\n\n  hideOptions = () => this.setState({ displayOptns: false });\n}\n\nfunction OptionsInstruction({ handleClick }) {\n  return (\n    <div className=\"input__subsection input__subsection--instructions\">\n      <p className=\"input__text input__text--or\">OR</p>\n      <p className=\"input__text\">Choose from five options.</p>\n      <p className=\"input__text\">(You will lose 20 points)</p>\n      <button\n        className=\"input__btn input__btn--expand\"\n        onClick={handleClick}\n        name=\"options-btn\"\n        type=\"button\"\n      >\n        Show Options\n      </button>\n    </div>\n  );\n}\n\nfunction OptionsGuess(props) {\n  const { display, handleSubmit, hideOptions, optionsArr } = props;\n\n  return !display ? (\n    <></>\n  ) : (\n    <div className=\"input__subsection input__subsection--options-guess\">\n      <Radio\n        type=\"country\"\n        optionNames={optionsArr}\n        handleSubmit={handleSubmit}\n        hideOptions={hideOptions}\n      />\n    </div>\n  );\n}\n\nfunction produceOptions(country, countriesArray, currentOptions) {\n  let options = [country.name];\n\n  //Keeping one of the previous options so that guessing next time is harder\n  if (currentOptions.length > 0) {\n    let i = Math.floor(Math.random() * currentOptions.length);\n\n    if (i === currentOptions.indexOf(country.name))\n      i = (i + 1) % (currentOptions.length - 1);\n\n    options.unshift(currentOptions[i]);\n  }\n\n  //getting three or four new options\n  const len = options.length;\n  for (let i = 1; i <= 5 - len; i++) {\n    const random = Math.floor(Math.random() * countriesArray.length);\n    if (!options.includes(countriesArray[random])) {\n      options.unshift(countriesArray[random]);\n    } else i--;\n  }\n\n  //shuffling the answer\n  const random = Math.floor(Math.random() * 4);\n  [options[4], options[random]] = [options[random], options[4]];\n\n  return options;\n}\n","import React from \"react\";\nimport TextInput from \"react-autocomplete-input\";\nimport \"react-autocomplete-input/dist/bundle.css\";\n\nimport FeaturesSection from \"./FeaturesSection\";\nimport OptionsSection from \"./OptionsSection\";\n\nexport default function UserInput(props) {\n  const {\n    handleSubmit,\n    country,\n    countriesArray,\n    handleGiveup,\n    handleReset,\n    changeScore,\n    seeOptionsScore,\n    inputVal,\n    handleInputChange,\n  } = props;\n\n  return (\n    <div className=\"input\">\n      <GuessSection\n        type=\"country\"\n        sectionType=\"section\"\n        handleSubmit={handleSubmit}\n        countriesArray={countriesArray}\n        inputVal={inputVal.country}\n        handleInputChange={handleInputChange}\n      />\n\n      <FeaturesSection\n        handleSubmit={handleSubmit}\n        inputVal={inputVal}\n        handleInputChange={handleInputChange}\n      />\n\n      <OptionsSection\n        handleSubmit={handleSubmit}\n        country={country}\n        countriesArray={countriesArray}\n        changeScore={changeScore}\n        seeOptionsScore={seeOptionsScore}\n      />\n      <div className=\"input__btns input__section input__section--btns\">\n        <button\n          className=\"input__btn input__btn--giveup\"\n          type=\"button\"\n          onClick={handleGiveup}\n        >\n          Give Up\n        </button>\n        <button\n          className=\"input__btn input__btn--reset\"\n          type=\"button\"\n          onClick={handleReset}\n        >\n          Reset Game\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction GuessSection(props) {\n  const {\n    type,\n    sectionType,\n    handleSubmit,\n    countriesArray,\n    inputVal,\n    handleInputChange,\n  } = props;\n\n  return (\n    <form\n      className={`input__form input__written-input input__${sectionType} input__${sectionType}--${type}`}\n      id={`${type}`}\n      onSubmit={handleSubmit}\n      autoComplete=\"off\"\n    >\n      <label className=\"input__title input__text\">\n        Guess the {type}:{\" \"}\n        <TextInput\n          name={type}\n          options={countriesArray}\n          Component=\"input\"\n          trigger=\"\"\n          matchAny={true}\n          maxOptions={10}\n          spacer=\"\"\n          offsetY={15}\n          passThroughEnter={true}\n          value={inputVal}\n          onChange={(change) => handleInputChange(change, type)}\n        />\n      </label>\n\n      <button className=\"input__submitBtn\"></button>\n    </form>\n  );\n}\n\nfunction Radio({ type, optionNames, handleSubmit, hideOptions }) {\n  const options = optionNames.map((option, idx) => (\n    <label className=\"input__text input__option\" key={idx}>\n      <input\n        type=\"radio\"\n        name={`${type}-options`}\n        className=\"input__radio\"\n        value={option}\n      />\n      {option}\n    </label>\n  ));\n\n  return (\n    <form\n      className={`input__form input__subsection input__subsection--options`}\n      id={`${type}-options`}\n      onSubmit={(submit) => {\n        submit.preventDefault();\n        handleSubmit(submit);\n        //For the case when component gets called from Options section.\n        //The time lapse is there so that the form isn't deleted before submission.\n        setTimeout(hideOptions, 50);\n      }}\n    >\n      <label className=\"input__title input__text\">Choose the {type}: </label>\n      <div className=\"input__options-group\">{options}</div>\n\n      <button className=\"input__submitBtn\"></button>\n    </form>\n  );\n}\n\nexport { Radio, GuessSection };\n","import React from \"react\";\n\nexport default function Header({ toggleInstructions }) {\n  return (\n    <div className=\"header\">\n      <h1 className=\"header__title\">\n        <span className=\"header__title header__title--fun\">Fun </span>\n        <span className=\"header__title header__title--with\">With </span>\n        <span className=\"header__title header__title--flags\">Flags </span>\n      </h1>\n      <h3 className=\"header__subtitle\">\n        Guess which country the flag represents!\n      </h3>\n      <button className=\"header__btn\" onClick={toggleInstructions} />\n    </div>\n  );\n}\n","import React from \"react\";\n\nfunction Celebration({ display, resetGame, hideCelebration }) {\n  return !display ? (\n    <></>\n  ) : (\n    <div className=\"celebration\">\n      <div className=\"celebration__background\" onClick={hideCelebration}></div>\n\n      <div className=\"celebration__dialogue dialogue\">\n        <div className=\"dialogue__texts\">\n          <h1 className=\"dialogue__text dialogue__text--title\">\n            Congradulations!\n          </h1>\n          <h2 className=\"dialogue__text dialogue__text--subtitle\">\n            You guessed all flags correctly!\n          </h2>\n          <p className=\"dialogue__text\">\n            Click 'Continue' to go back to the previous game,\n          </p>\n          <p className=\"dialogue__text\">or </p>\n          <p className=\"dialogue__text\">start a new game</p>\n        </div>\n\n        <div className=\"dialogue__btns\">\n          <button className=\"dialogue__btn\" onClick={hideCelebration}>\n            Continue\n          </button>\n          <button className=\"dialogue__btn\" onClick={resetGame}>\n            New Game\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Celebration;\n","export default __webpack_public_path__ + \"static/media/loading.70b4daea.svg\";","import React from \"react\";\nimport loading from \"../assets/loading.svg\";\n\nexport default function Loading() {\n  return (\n    <div className=\"loading\">\n      <img className=\"loading__img\" src={loading} alt=\"loading\" />\n      <h1 className=\"loading__text\">Loading...</h1>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Instructions({ display, toggle }) {\n  return !display ? (\n    <></>\n  ) : (\n    <div className=\"instructions\">\n      <div className=\"instructions__background\" onClick={toggle}></div>\n      <div className=\"instructions__main\">\n        <p className=\"instructions__text\">\n          You have 100 points at each stage and will lose 10 points for each\n          wrong answer. You'll go to the next level when you guess correctly.\n        </p>\n        <p className=\"instructions__text\">\n          If you are sure of your guess, yet it's not correct, it might be\n          because the official name is different, or that the answer is another\n          country which shares the same flag.\n        </p>\n        <p className=\"instructions__text\">Negative scores are also possible.</p>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Display from \"./components/Display\";\nimport UserInput from \"./components/UserInput\";\nimport Header from \"./components/Header\";\nimport Celebration from \"./components/Celebration\";\nimport Loading from \"./components/Loading\";\nimport Instructions from \"./components/Instructions\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.wrongGuessScore = -10;\n    this.useHintScore = -5;\n    this.seeOptionsScore = -20;\n    this.scoreAnimationClassName = [\"animation--increment\", \"animation--move\"];\n    this.flagAnimationClassName = [\n      \"flag__animation--appear\",\n      \"flag__animation--disappear\",\n    ];\n    this.optionsAnimationClassName = \"input__show-options\";\n    this.newGameDelay = 2000;\n  }\n\n  state = {\n    countriesArray: undefined,\n    country: undefined,\n    guessed: [],\n    currentScore: 100,\n    currentScoreClass: \"\",\n    totalScore: 0,\n    totalScoreClass: \"\",\n    announce: null,\n    announceClass: \"\",\n    countryInputVal: \"\",\n    languageInputVal: \"\",\n    currencyInputVal: \"\",\n    countClass: \"\",\n    displayCelebration: false,\n    flagClass: \"\",\n    optionsClass: \"\",\n    displayInstructions: false,\n  };\n  render() {\n    let inputValObj = {\n      country: this.state.countryInputVal,\n      language: this.state.languageInputVal,\n      currency: this.state.currencyInputVal,\n    };\n    if (!this.state.country) return <Loading />;\n    else {\n      return (\n        <>\n          <Header toggleInstructions={this.toggleInstructions} />\n          <Instructions\n            display={this.state.displayInstructions}\n            toggle={this.toggleInstructions}\n          />\n          <div className=\"content\">\n            <Display\n              announce={this.state.announce}\n              announceClass={this.state.announceClass}\n              removeAnnounceClass={this.removeAnnounceClass}\n              src={this.state.country.flag}\n              flagClass={this.state.flagClass}\n              current={this.state.currentScore}\n              currentScoreClass={this.state.currentScoreClass}\n              handleScoreAnimationStop={this.handleScoreAnimationStop}\n              total={this.state.totalScore}\n              totalScoreClass={this.state.totalScoreClass}\n              count={this.state.guessed.length}\n              countClass={this.state.countClass}\n              allGamesNum={this.state.countriesArray.length}\n            />\n\n            <UserInput\n              handleSubmit={this.handleSubmit}\n              handleGiveup={this.handleGiveup}\n              handleReset={this.handleReset}\n              changeScore={this.changeCurrentScore}\n              seeOptionsScore={this.seeOptionsScore}\n              country={this.state.country}\n              countriesArray={this.state.countriesArray}\n              inputVal={inputValObj}\n              handleInputChange={this.handleInputChange}\n            />\n          </div>\n          <Celebration\n            display={this.state.displayCelebration}\n            resetGame={this.handleReset}\n            hideCelebration={this.hideCelebration}\n          />\n        </>\n      );\n    }\n  }\n\n  componentDidMount() {\n    axios\n      .get(\"https://restcountries.eu/rest/v2/all?fields=name\")\n      .then((response) => {\n        //response.data format [{name: country_name}]\n        let countriesArray = response.data.map((countryObj) => countryObj.name);\n        this.setState({ countriesArray: countriesArray });\n        this.getCountry();\n      });\n  }\n\n  getCountry = () => {\n    let country;\n    //The condition checks that a country is not selected twice (before all countries are guessed)\n    while (\n      !country ||\n      (this.state.guessed.length !== this.state.countriesArray &&\n        this.state.guessed.indexOf(country) >= 0)\n    ) {\n      let index = Math.floor(Math.random() * this.state.countriesArray.length);\n      country = this.state.countriesArray[index];\n    }\n    axios\n      .get(`https://restcountries.eu/rest/v2/name/${country}`)\n      .then((response) => {\n        country = response.data[0];\n        console.log(country);\n        setTimeout(\n          () =>\n            this.setState({\n              country: country,\n              announce: null,\n              currentScore: 100,\n              flagClass: this.flagAnimationClassName[0],\n            }),\n          this.newGameDelay\n        );\n      });\n  };\n\n  handleSubmit = (submit) => {\n    submit.preventDefault();\n    let type = submit.target.id;\n    const submitted = submit.target[type].value.toLowerCase();\n\n    //Clearing out the input field\n    if (type === \"country\" || type === \"language\" || type === \"currency\")\n      this.handleInputChange(\"\", type);\n\n    //Adjusting the score and announcement\n    switch (type) {\n      case \"country\":\n        this.handleFinalGuess(submitted, false);\n        break;\n      case \"continent-options\":\n        this.handleFeatureGuess(\"continent\", submitted);\n        break;\n\n      case \"language\":\n        this.handleFeatureGuess(\"languages\", submitted);\n        break;\n\n      case \"currency\":\n        this.handleFeatureGuess(\"currencies\", submitted);\n        break;\n\n      case \"country-options\":\n        this.handleFinalGuess(submitted, true);\n        break;\n\n      default:\n        console.log(\"Something wrong with submission\");\n    }\n\n    submit.target.reset();\n  };\n\n  handleFinalGuess = (submitted, isMultipleAnswer) => {\n    const increment = isMultipleAnswer ? 0 : this.wrongGuessScore;\n    const animationClassName = isMultipleAnswer\n      ? \"\"\n      : this.scoreAnimationClassName[0];\n\n    //Checking if the submitted answer equals the country's name or alternative spellings\n    //(index 0 of altSpellings is excluded because it's a two letter representation of the country's name)\n    if (\n      submitted === this.state.country.name.toLowerCase() ||\n      this.state.country.altSpellings.some(\n        (spelling, idx) => idx !== 0 && submitted === spelling.toLowerCase()\n      )\n    ) {\n      this.setState(\n        {\n          currentScoreClass: this.scoreAnimationClassName[1],\n          announce: \"Yes!\",\n          announceClass: announceClassName(\"final\", \"yes\"),\n          countClass: this.scoreAnimationClassName[0],\n\n          guessed: [...this.state.guessed, this.state.country.name],\n          flagClass: this.flagAnimationClassName[1],\n        },\n        () => {\n          //Showing celebration if all countries have been played\n          if (this.state.guessed.length === this.state.countriesArray.length)\n            this.setState({ displayCelebration: true });\n\n          //Selecting a new country and starting a new game\n          this.getCountry();\n        }\n      );\n    } else\n      this.setState({\n        currentScore: this.state.currentScore + increment,\n        currentScoreClass: animationClassName,\n        announce: \"Nope!\",\n        announceClass: announceClassName(\"final\", \"no\"),\n      });\n  };\n\n  handleFeatureGuess = (type, submitted) => {\n    //Adjust score\n    this.changeCurrentScore(this.useHintScore);\n    const isCorrect =\n      type === \"continent\"\n        ? submitted === this.state.country.region.toLowerCase()\n        : this.state.country[type].some(\n            (value) => value.name.toLowerCase() === submitted\n          );\n\n    //Show announcement\n    if (isCorrect) {\n      this.setState({\n        announce: \"Yes\",\n        announceClass: announceClassName(\"feature\", \"yes\"),\n      });\n    } else\n      this.setState({\n        announce: \"No\",\n        announceClass: announceClassName(\"feature\", \"no\"),\n      });\n  };\n\n  handleGiveup = () => {\n    this.setState({\n      totalScore: this.state.totalScore + this.useHintScore,\n      currentScore: 100,\n      countryInputVal: \"\",\n      languageInputVal: \"\",\n      currencyInputVal: \"\",\n      flagClass: this.flagAnimationClassName[1],\n    });\n    this.getCountry();\n  };\n\n  handleReset = () => {\n    this.setState({\n      guessed: [],\n      currentScoreClass: \"\",\n      totalScore: 0,\n      totalScoreClass: \"\",\n      announceClass: \"\",\n      countryInputVal: \"\",\n      languageInputVal: \"\",\n      currencyInputVal: \"\",\n      countClass: \"\",\n      displayCelebration: false,\n    });\n    this.getCountry();\n  };\n\n  handleInputChange = (change, type) => {\n    let key = `${type}InputVal`;\n    let obj = {};\n    obj[key] = change;\n    this.setState(obj);\n  };\n\n  changeCurrentScore = (increment) => {\n    this.setState((state) => ({\n      currentScore: state.currentScore + increment,\n      currentScoreClass: this.scoreAnimationClassName[0],\n    }));\n  };\n\n  removeAnnounceClass = () => {\n    let classList = this.state.announceClass.split(\" \");\n    this.setState({ announceClass: classList[1] + \" \" + classList[2] });\n  };\n\n  handleScoreAnimationStop = () => {\n    //Game has finished and correct guesses got 'incremented'\n    if (this.state.countClass.includes(\"increment\")) {\n      this.setState({ countClass: \"\" });\n      return;\n    }\n\n    //Game has finished and current score 'moved' and got added to total score\n    if (this.state.currentScoreClass.includes(\"move\")) {\n      this.setState({\n        currentScoreClass: \"\",\n        totalScore: this.state.totalScore + this.state.currentScore,\n        totalScoreClass: this.scoreAnimationClassName[0],\n      });\n    }\n    //In the middle of the game, current score got 'incremented'\n    if (this.state.currentScoreClass.includes(\"increment\")) {\n      this.setState({ currentScoreClass: \"\" });\n    }\n    //Game has finished and total score and correct guesses got 'incremented'\n    if (this.state.totalScoreClass.includes(\"increment\")) {\n      this.setState({ totalScoreClass: \"\" });\n    }\n  };\n\n  removeScoreClass = () => this.setState({ currentScoreClass: \"\" });\n\n  hideCelebration = () => this.setState({ displayCelebration: false });\n\n  toggleInstructions = () =>\n    this.setState({ displayInstructions: !this.state.displayInstructions });\n}\n\nfunction announceClassName(type, yOrN) {\n  return `announce__animation--${type} announce__${type} announce__${type}--${yOrN}`;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/main.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}